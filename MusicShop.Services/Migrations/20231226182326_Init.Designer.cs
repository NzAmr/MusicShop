// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicShop.Services.Database;

#nullable disable

namespace MusicShop.Services.Migrations
{
    [DbContext(typeof(MusicShopDBContext))]
    [Migration("20231226182326_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicShop.Services.Database.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ShippingInfoId")
                        .HasColumnType("int")
                        .HasColumnName("ShippingInfoID");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ShippingInfoId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOfEmployment")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.GearCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GearCategory", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.GuitarType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("GuitarType", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ShippingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductImageId")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductImageId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MusicShop.Services.Database.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.ShippingInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateOrProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.ToTable("ShippingInfo", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.StudioReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TimeTo")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("StudioReservation", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Amplifier", b =>
                {
                    b.HasBaseType("MusicShop.Services.Database.Product");

                    b.Property<bool?>("HeadphoneJack")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfPresets")
                        .HasColumnType("int");

                    b.Property<int?>("PowerRating")
                        .HasColumnType("int");

                    b.Property<bool?>("Usbjack")
                        .HasColumnType("bit");

                    b.Property<int?>("Voltage")
                        .HasColumnType("int");

                    b.ToTable("Amplifier", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Bass", b =>
                {
                    b.HasBaseType("MusicShop.Services.Database.Product");

                    b.Property<int?>("Frets")
                        .HasColumnType("int");

                    b.Property<int?>("GuitarTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Pickups")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GuitarTypeId");

                    b.ToTable("Bass", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Gear", b =>
                {
                    b.HasBaseType("MusicShop.Services.Database.Product");

                    b.Property<int?>("GearCategoryId")
                        .HasColumnType("int");

                    b.HasIndex("GearCategoryId");

                    b.ToTable("Gear", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Guitar", b =>
                {
                    b.HasBaseType("MusicShop.Services.Database.Product");

                    b.Property<int?>("Frets")
                        .HasColumnType("int");

                    b.Property<int?>("GuitarTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PickupConfiguration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pickups")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("GuitarTypeId");

                    b.ToTable("Guitar", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Synthesizer", b =>
                {
                    b.HasBaseType("MusicShop.Services.Database.Product");

                    b.Property<int?>("KeyboardSize")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPresets")
                        .HasColumnType("int");

                    b.Property<int?>("Polyphony")
                        .HasColumnType("int");

                    b.Property<bool?>("WeighedKeys")
                        .HasColumnType("bit");

                    b.ToTable("Synthesizer", (string)null);
                });

            modelBuilder.Entity("MusicShop.Services.Database.Customer", b =>
                {
                    b.HasOne("MusicShop.Services.Database.ShippingInfo", "ShippingInfo")
                        .WithMany("Customers")
                        .HasForeignKey("ShippingInfoId")
                        .HasConstraintName("FK_Customer_ShippingInfo");

                    b.Navigation("ShippingInfo");
                });

            modelBuilder.Entity("MusicShop.Services.Database.OrderDetail", b =>
                {
                    b.HasOne("MusicShop.Services.Database.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Product", b =>
                {
                    b.HasOne("MusicShop.Services.Database.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("MusicShop.Services.Database.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageId");

                    b.Navigation("Brand");

                    b.Navigation("ProductImage");
                });

            modelBuilder.Entity("MusicShop.Services.Database.StudioReservation", b =>
                {
                    b.HasOne("MusicShop.Services.Database.Customer", "Customer")
                        .WithMany("StudioReservations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_StudioReservation_Customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Amplifier", b =>
                {
                    b.HasOne("MusicShop.Services.Database.Product", null)
                        .WithOne()
                        .HasForeignKey("MusicShop.Services.Database.Amplifier", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicShop.Services.Database.Bass", b =>
                {
                    b.HasOne("MusicShop.Services.Database.GuitarType", "GuitarType")
                        .WithMany("Basses")
                        .HasForeignKey("GuitarTypeId");

                    b.HasOne("MusicShop.Services.Database.Product", null)
                        .WithOne()
                        .HasForeignKey("MusicShop.Services.Database.Bass", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("GuitarType");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Gear", b =>
                {
                    b.HasOne("MusicShop.Services.Database.GearCategory", "GearCategory")
                        .WithMany("Gears")
                        .HasForeignKey("GearCategoryId");

                    b.HasOne("MusicShop.Services.Database.Product", null)
                        .WithOne()
                        .HasForeignKey("MusicShop.Services.Database.Gear", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("GearCategory");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Guitar", b =>
                {
                    b.HasOne("MusicShop.Services.Database.GuitarType", "GuitarType")
                        .WithMany("Guitars")
                        .HasForeignKey("GuitarTypeId");

                    b.HasOne("MusicShop.Services.Database.Product", null)
                        .WithOne()
                        .HasForeignKey("MusicShop.Services.Database.Guitar", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("GuitarType");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Synthesizer", b =>
                {
                    b.HasOne("MusicShop.Services.Database.Product", null)
                        .WithOne()
                        .HasForeignKey("MusicShop.Services.Database.Synthesizer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicShop.Services.Database.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Customer", b =>
                {
                    b.Navigation("StudioReservations");
                });

            modelBuilder.Entity("MusicShop.Services.Database.GearCategory", b =>
                {
                    b.Navigation("Gears");
                });

            modelBuilder.Entity("MusicShop.Services.Database.GuitarType", b =>
                {
                    b.Navigation("Basses");

                    b.Navigation("Guitars");
                });

            modelBuilder.Entity("MusicShop.Services.Database.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MusicShop.Services.Database.ProductImage", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MusicShop.Services.Database.ShippingInfo", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
